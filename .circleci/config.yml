version: 2.1           

orbs: 
    slack: circleci/slack@4.10.1

parameters:
    workflow_id:
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"

commands:
    destroy-environment:
        description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
        parameters:
            Workflow_ID:
                type: string
                # default: ${CIRCLE_WORKFLOW_ID:0:7}
        steps:
            - run:
                name: Destroy environments
                when: on_fail
                command: |
                    # Empty frontend bucket
                    aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive

                    # Delete frontend stack
                    aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>

                    # Delete backend stack
                    aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>   
    install_awscli:
        description: Install AWS CLI v2
        steps:
            - run:
                name: Install AWS CLI v2
                command: |
                    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                    unzip awscliv2.zip
                    sudo ./aws/install
    install_ansible:
        description: Install Ansible
        steps:
            - run:
                name: Install Ansible
                command: |
                    python3 -m pip install --user ansible
    install_nodejs:
        description: Install Node.js 13.8.0
        steps:
            - run:
                name: Install Node.js 13.8.0
                command: |
                    # Install Node.js LTS version as our base Node.js version
                    curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
                    sudo apt-get install -y nodejs

                    # Use n version manager to use Node.js v13.8.0
                    sudo npm install --global n
                    sudo n 13.8.0
    revert-migrations:
        description: Revert the last migration, if any were executed during the current workflow
        parameters:
            Workflow_ID:
                type: string
                # default: ${CIRCLE_WORKFLOW_ID:0:7}
        steps:
            - run:
                name: Revert migrations
                when: on_fail
                command: |
                    SUCCESS=$(curl --insecure  https://kvdb.io/GGuAd8RUUzUDyBpjx8XDYK/migration_<< parameters.Workflow_ID >>)

                    # Logic for reverting the database state
                    if (( $SUCCESS == 1 ));
                    then
                    cd ~/project/backend
                    npm install
                    npm run migration:revert
                    fi

    
jobs:
    build-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
                - checkout
                - restore_cache:
                    keys: [frontend-deps]
                - run:
                    name: Build front-end
                    command: |
                        cd frontend
                        npm install
                        npm run build
                    
                - save_cache:
                    paths: [frontend/node_modules]
                    key: frontend-deps
                - slack/notify:
                    event: fail
                    template: basic_fail_1

    build-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
                - checkout
                - restore_cache:
                    keys: [backend-deps]
                - run:
                    name: Back-end build
                    command: |
                        cd backend
                        npm install
                        npm run build
                        
                - save_cache:
                        paths: [backend/node_modules]
                        key: backend-dep
                - slack/notify:
                    event: fail
                    template: basic_fail_1
    
    test-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
                - checkout
                - restore_cache:
                    keys: [frontend-deps]
                - run:
                    name:  Front-end test
                    command: |
                        cd frontend
                        npm install
                        npm run test
                - slack/notify:
                    event: fail
                    template: basic_fail_1
                    
    test-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
                - checkout
                - restore_cache:
                    keys: [backend-deps]
                - run:
                    name: Back-end test
                    command: |
                        cd backend
                        npm install
                        npm run test
                - slack/notify:
                    event: fail
                    template: basic_fail_1

    scan-frontend:
            docker:
                - image: circleci/node:13.8.0
            steps:
                - checkout
                - restore_cache:
                    keys: [frontend-deps]
                - run:
                    name:  Analyze frontend 
                    command: |
                        cd frontend
                        npm install
                          
                        npm audit fix --force --audit-level=critical
                        npm audit --audit-level=critical 

    scan-backend:
            docker:
                - image: circleci/node:13.8.0
            steps:
                    - checkout
                    - restore_cache:
                        keys: [backend-deps]
                    - run:
                        name:  Analyze backend 
                        command: |
                            cd backend
                            npm install
                              
                            npm audit fix --force --audit-level=critical
                            npm audit fix --force --audit-level=critical
                            npm audit --audit-level=critical

    deploy-infrastructure:
        docker:
        - image: amazon/aws-cli
        steps:
        - checkout
        - run: yum install -y tar gzip
        - run:
            name: Ensure back-end infrastructure exists
            command: |
                aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --tags project=udapeople \
                --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
                --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
        - run:
            name: Ensure front-end infrastructure exist
            command: |
                aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --tags project=udapeople \
                --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
                --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
        - run:
            name: Add back-end ip to ansible inventory
            command: |
                BACKEND_IP=$(aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
                --output text) 
                echo $BACKEND_IP >> ~/project/.circleci/ansible/inventory.txt
                echo http://${BACKEND_IP}:3030 > backend-url.txt 
                cat backend-url.txt
        - persist_to_workspace:
            root: ~/
            paths:
                - project/.circleci/ansible/inventory.txt
                - project/backend-url.txt
        - destroy-environment:
            Workflow_ID: ${CIRCLE_WORKFLOW_ID:0:7}   

    configure-infrastructure:
        docker:
        - image: cimg/python:3.10
        steps:
            - checkout
            - install_awscli
            - install_ansible
            - add_ssh_keys:
                fingerprints:
                    - '6c:cb:ac:0c:20:cb:fa:10:2c:03:21:17:a8:cf:f4:4e'
            - attach_workspace:
                at: ~/
            - run: 
                name: View inventory.txt 
                command: |
                    cat .circleci/ansible/inventory.txt
            - run:
                name: Configure server
                command: |
                    # add environment variable to server
                    echo ENVIRONMENT=production >backend/.env
                    echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> backend/.env
                    echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> backend/.env  
                    echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env 
                    echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> backend/.env 
                    echo TYPEORM_MIGRATION_DIR=$TYPEORM_MIGRATION_DIR >> backend/.env 
                    echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env 
                    echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env 
                    echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env                  TYPEORM_DATABASE: "{{ lookup('env', 'TYPEORM_DATABASE')}}"
                    cat backend/.env
                    cd .circleci/ansible
                    ansible-playbook -i inventory.txt configure-server.yml
            - persist_to_workspace:
                root: ~/
                paths:
                    - project/backend
            - destroy-environment:
                Workflow_ID: ${CIRCLE_WORKFLOW_ID:0:7}  

    run-migrations:
        docker:
            - image: cimg/python:3.10
        steps:
            - checkout
            - install_awscli
            - install_nodejs
            - restore_cache:
                keys: [backend-build]
            - attach_workspace:
                at: ~/
            - run:
                name: Run migrations
                command: |
                    cd backend
                    npm install
                    npm run migrations > migrations_dump.txt
                    cat migrations_dump.txt
            - run:
                name: Send migration results to kvdb
                command: |
                    if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
                    then
                        curl  https://kvdb.io/GGuAd8RUUzUDyBpjx8XDYK/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
                    fi

            - destroy-environment:
                Workflow_ID: ${CIRCLE_WORKFLOW_ID:0:7}
            - revert-migrations:
                Workflow_ID: ${CIRCLE_WORKFLOW_ID:0:7}

    deploy-frontend:
        docker:
            - image: python:3.10-alpine3.16
        steps:
            - checkout
            - attach_workspace:
                at: ~/
            - run:
                name: Install dependencies
                command: |
                    apk add --update --no-cache tar gzip nodejs npm ansible curl aws-cli
            - restore_cache:
                keys: [frontend-build]
            - run:
                name: Get backend url
                command: |
                    export BACKEND_IP=$(aws ec2 describe-instances \
                    --query 'Reservations[*].Instances[*].PublicIpAddress' \
                    --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
                    --output text)
                    export API_URL="http://${BACKEND_IP}:3030"
                    echo "API_URL = ${API_URL}"
                    echo "API_URL=http://${BACKEND_IP}:3030" >> frontend/.env
                    cat frontend/.env
            - run:
                name: Deploy frontend objects
                command: |
                    cd frontend
                    npm install
                    npm run build
                    tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
                    aws s3 cp --recursive dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}                 
            - destroy-environment:
                Workflow_ID: ${CIRCLE_WORKFLOW_ID:0:7}
            - revert-migrations:
                Workflow_ID: ${CIRCLE_WORKFLOW_ID:0:7}
    
    deploy-backend:
        docker:
            - image: python:3.7-alpine3.16
        steps:
        - checkout
        - restore_cache:
            keys: [backend-build]
        - attach_workspace:
            at: ~/
        - run:
            name: Install dependencies
            command: |
                apk add --update --no-cache tar gzip nodejs tree aws-cli ansible curl rsync openssh npm
        - add_ssh_keys:
            fingerprints:
                - '6c:cb:ac:0c:20:cb:fa:10:2c:03:21:17:a8:cf:f4:4e'
        - run:
            name: deploy backend
            command: |
                cd backend 
                npm install --legacy-peer-deps
                npm run build
                cd ..
                tar -C backend -czvf artifact.tar.gz  .
                mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
                mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
                cd .circleci/ansible
                echo "Contents of the inventory.txt file is ------$(cat inventory.txt)"
                ansible-playbook -i inventory.txt deploy-backend.yml
        - destroy-environment:
            Workflow_ID: ${CIRCLE_WORKFLOW_ID:0:7}
        - revert-migrations:
                Workflow_ID: ${CIRCLE_WORKFLOW_ID:0:7}
   
    smoke-test:
        docker:
        - image: python:3.7-alpine3.16
        steps:
        - checkout
        - attach_workspace:
            at: ~/
        - run:
            name: Install dependencies
            command: |
                apk add --update --no-cache aws-cli curl
        - run:
            name: Backend smoke test.
            command: |
                BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text)
                export API_URL=http://${BACKEND_PUBLIC_IP}:3030
                echo "${API_URL}"
                if curl  "${API_URL}/api/status" | grep "ok"
                then
                    return 0
                else
                    return 1
                fi
        - run:
            name: Frontend smoke test.
            command: |
                FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
                if curl -s ${FRONTEND_WEBSITE} | grep "Welcome"
                then
                    return 0
                else
                    return 1
                fi
        - destroy-environment:
            Workflow_ID: ${CIRCLE_WORKFLOW_ID:0:7}
        - revert-migrations:
            Workflow_ID: ${CIRCLE_WORKFLOW_ID:0:7}

    cloudfront-update:
        docker:
        - image: circleci/node:13.8.0
        steps:
        - checkout
        - install_awscli
        - install_nodejs
        - run:
            name: Update cloudfront distribution
            command: |
                export OLD_WORKFLOW_ID=$(aws cloudformation \
                        list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                        --no-paginate --output text)
                aws cloudformation deploy \
                --template-file .circleci/files/cloudfront.yml \
                --stack-name InitialStack \
                --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} \
                --tags project=udapeople
                
        - destroy-environment:
            Workflow_ID: ${CIRCLE_WORKFLOW_ID:0:7}
        - revert-migrations:
            Workflow_ID: ${CIRCLE_WORKFLOW_ID:0:7}

    cleanup:
        docker:
        - image: circleci/node:13.8.0
        steps:
            - checkout
            - install_awscli
            - install_nodejs
            - run:
                name: Remove old stacks and files
                command: |
                    # Fetch the Old workflow ID
                    export OldWorkflowID=<<pipeline.parameters.workflow_id>>
                    export STACKS=$(aws cloudformation list-stacks\                            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --query "StackSummaries[*].StackName"\
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
                   
                    echo Stack names: "${STACKS[@]}"          
                    if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
                    then
                    aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                    aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                    aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
                    fi


workflows:
    default:
        jobs:
            - build-frontend
            - build-backend
            - test-frontend:
                requires: [build-frontend]
            - test-backend:
                requires: [build-backend]
            - scan-frontend:
                requires: [build-frontend]
            - scan-backend:
                requires: [build-backend]
            - deploy-infrastructure:
                requires: [test-frontend, test-backend, scan-frontend, scan-backend]
                filters:
                    branches:
                        only: [master]
            - configure-infrastructure:
                requires: [deploy-infrastructure]
            - run-migrations:
                requires: [configure-infrastructure]
            - deploy-frontend:
                requires: [run-migrations]
            - deploy-backend:
                requires: [run-migrations]
            - smoke-test:
                requires: [deploy-backend, deploy-frontend]
            - cloudfront-update:
                requires: [smoke-test]
            # - cleanup:
            #     requires: [cloudfront-update]
